<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://L1nkzz.github.io</id>
    <title>L1nk的博客</title>
    <updated>2021-02-20T14:52:39.039Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://L1nkzz.github.io"/>
    <link rel="self" href="https://L1nkzz.github.io/atom.xml"/>
    <logo>https://L1nkzz.github.io/images/avatar.png</logo>
    <icon>https://L1nkzz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, L1nk的博客</rights>
    <entry>
        <title type="html"><![CDATA[题解 P4981父子 (Carley定理)]]></title>
        <id>https://L1nkzz.github.io/post/ti-jie-p4981-fu-zi-carley-ding-li/</id>
        <link href="https://L1nkzz.github.io/post/ti-jie-p4981-fu-zi-carley-ding-li/">
        </link>
        <updated>2021-02-20T13:07:23.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4981">原题链接</a></p>
<h1 id="题意">题意</h1>
<p>构造一棵含n个带序号的点的有根树，求方案数</p>
<p><em>Carley定理~</em><br>
Carley定理：n个带序号的节点共能构成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n^{n-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>个形态不同的无根树</p>
<p>套！</p>
<p>Carley定理处理的是无根树，而这题是有根树；树的每种形态都有n个点可做根，所以总方案数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>核心代码</p>
<pre><code class="language-cpp">int main()
{
	int t;
	read(t);
	F(i, 1, t)
	{
		ll n;
		read(n);
		write(qpow(n, n-1), '\n');
	}
	return 0;
}
</code></pre>
<p>全代码</p>
<pre><code class="language-cpp">
// Problem: P4981 父子
// Contest: Luogu
// URL: https://www.luogu.com.cn/problem/P4981
// Memory Limit: 128 MB
// Time Limit: 1000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

//#include &lt;bits/stdc++.h&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;math.h&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;climits&gt;
#include &lt;functional&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;stack&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;bitset&gt;
#include &lt;complex&gt;
//#include &lt;ext/pb_ds/assoc_container.hpp&gt;
//#include &lt;ext/pb_ds/tree_policy.hpp&gt;
#define itn int
#define nit int
#define ll long long
#define ms multiset
#define F(i, a, b) for(register int i = a, i##end = b; i &lt;= i##end; ++i)
#define UF(i, a, b) for(register int i = a, i##end = b; i &gt;= i##end; --i)
#define re register
#define ri re int
#define il inline
#define pii pair&lt;int, int&gt;
#define cp complex&lt;double&gt;
//#pra gma G CC opti mize(3)
using namespace std;
using std::bitset;
//using namespace __gnu_pbds;
const double Pi = acos(-1);
namespace fastIO
{
    template&lt;class T&gt;
    inline void read(T &amp;x)
    {
        x = 0;
        bool fu = 0;
        char ch = 0;
        while(ch &gt; '9' || ch &lt; '0')
        {
            ch = getchar();
            if(ch == '-')
                fu = 1;
        }
        while(ch &lt;= '9' &amp;&amp; ch &gt;= '0')
            x = (x * 10 - 48 + ch), ch = getchar();
        if(fu)
            x = -x;
    }
    inline int read()
    {
        int x = 0;
        bool fu = 0;
        char ch = 0;
        while(ch &gt; '9' || ch &lt; '0')
        {
            ch = getchar();
            if(ch == '-')
                fu = 1;
        }
        while(ch &lt;= '9' &amp;&amp; ch &gt;= '0')
            x = (x * 10 - 48 + ch), ch = getchar();
        return fu ? -x : x;
    }
    char _n_u_m_[40];
    template&lt;class T&gt;
    inline void write(T x )
    {
        if(x == 0)
        {
            putchar('0');
            return;
        }
        T tmp = x &gt; 0 ? x : -x;
        if(x &lt; 0)
            putchar('-');
        register int cnt = 0;
        while(tmp &gt; 0)
        {
            _n_u_m_[cnt++] = tmp % 10 + '0';

            tmp /= 10;
        }
        while(cnt &gt; 0) 
            putchar(_n_u_m_[--cnt]);
    }
    template&lt;class T&gt;
    inline void write(T x ,char ch)
    {
        write(x);
        putchar(ch);
    }
}
using namespace fastIO;
ll mod = 1e9 + 9;

ll qpow(ll n, ll k)
{
	ll tmp = 1;
	while(k)
	{
		if(k &amp; 1)
		{
			tmp *= n;
			tmp %= mod;
		}
		k &gt;&gt;= 1;
		n *= n;
		n %= mod;
	}
	return tmp;
}

int main()
{
	int t;
	read(t);
	F(i, 1, t)
	{
		ll n;
		read(n);
		write(qpow(n, n-1), '\n');
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bugs]]></title>
        <id>https://L1nkzz.github.io/post/bugs/</id>
        <link href="https://L1nkzz.github.io/post/bugs/">
        </link>
        <updated>2020-11-01T13:05:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="不开unsigned-long-long见祖宗"><strong>不开unsigned long long见祖宗！！！！！</strong></h1>
<h1 id="重点">重点</h1>
<ul>
<li><em><strong>freopen！</strong></em></li>
<li><em><strong>long long! 用快读的话，不要忘记把快读的返回值改成longlong， 里面的整数n也要改成longlong， printf(&quot;%lld&quot;)</strong></em></li>
<li><em><strong>int main()!</strong></em> <s>因为忘记开ll直接ctrl+F把全部int替换成ll</s></li>
<li><em><strong>cin,cout不能和printf,scanf,快读等混用</strong></em></li>
<li><em><strong>别忘加头文件！</strong></em></li>
<li><em><strong>if里是用==不是=</strong></em> <s>迟诚行为</s></li>
</ul>
<h1 id="线段树">线段树</h1>
<p>习惯：add(int pos, int l, int r, int nl, int nr, int k)<br>
find(int pos, int l, int r, int nl, int nr)<br>
pos指线段树中当前下标，l、r为所要求的l、r，nl、nr为nowl,nowr，即为现在所在的区间端点</p>
<ul>
<li>数组开四倍大小</li>
<li>add、find中mid = nl + nr &gt;&gt; 1;</li>
<li>向下遍历时：if(l &lt;= mid) 和 if(r &gt; mid)</li>
<li>一定要记住在函数中间写down，结尾写up！</li>
<li>down里num[pos &lt;&lt; 1] + ltag[pos] * (mid - l + 1)！千万不能直接写size = r - l + 1 &gt;&gt; 1;</li>
<li>主函数调用函数的参数一定要一一对应，不能够上面void doit(int size, int pos)下面调用时doit(pos, size)</li>
<li>不要图方便把mid等变量改成全局变量</li>
<li>maketree()、add()等等没有返回值的函数，l==r或者nl &gt;= l &amp;&amp; nr &lt;= r等函数结束时，不要忘记return来避免继续递归</li>
</ul>
<h1 id="树链剖分">树链剖分</h1>
<ul>
<li>dfs1，处理f，depth，bson(biggest_son)，size</li>
<li>如何判断连的边不是父节点？lines[pos][i] != list[pos].f</li>
<li>dfs2，处理dfs序，将点的权值按照dfs序传入数组，方便建立线段树；处理重链的顶点</li>
<li>dfs序一定要bson优先，这样能保证一条重链上的dfs序号连续</li>
</ul>
<h1 id="莫队算法">莫队算法</h1>
<ul>
<li>离线！</li>
<li>询问排序：优先按左端点的块的编号排序，其次按右端点排序</li>
<li><strong>核心</strong></li>
<li>指针st， ed，对于排序后的每个询问进行指针的左右移动，同时对ans进行修改</li>
</ul>
<h1 id="矩阵相乘">矩阵相乘</h1>
<p>矩阵a(n, m), b(m, k)，相乘得到c(n, k);<br>
c(x, y)为a第x行每个值与b第y行每个值的乘积之和</p>
<h1 id="强连通">强连通</h1>
<ul>
<li>while从栈中取数时，判断条件为<em>while (id != pos)</em>，不能写list[st.top()].dfn != xxxxxxx.low，因为同一强连通分量里可能会有不止一个点满足这一条件</li>
</ul>
<h1 id="最短路">最短路</h1>
<ul>
<li><strong>优！先！队！列！的！比！较！函！数！是！反！过！来！的！写！大！于！号！就！成！了！小！根！堆！</strong></li>
<li>记得开visit数组记录此节点走没走过，否则时间会爆炸的</li>
<li>要把mindis数组初始化为INT_MAX</li>
<li>优先队列取完队首要立刻出栈！！！</li>
<li>在加入优先队列时，一定要优先更新mindis数组，否则q.top()可能会改变，也不要一定以为新加入的点一定是最小值；<br>
错误如下：<pre><code class="language-cpp">points tmp;
tmp.pos = id;
tmp.d = dis;
q.push(tmp);
d[id] = q.top().d;
</code></pre>
</li>
</ul>
<h1 id="生成树">生成树</h1>
<ul>
<li>保证每条边的x、y有序，x小于y，这样方便维护并查集</li>
</ul>
<h1 id="网络流">网络流</h1>
<ul>
<li>权值在边上不在点上不要犯搞混点编号和边编号的nt错误。。。。</li>
<li>dfs里要注意num &lt;= 0 的时候就要退出循环，没有贡献了</li>
<li>pos初始必须是奇数，即保证一对正反边奇数序号较大偶数序号较小这样可以直接异或计算</li>
</ul>
]]></content>
    </entry>
</feed>