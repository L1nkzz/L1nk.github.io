<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://L1nkzz.github.io</id>
    <title>L1nk的博客</title>
    <updated>2020-11-07T04:12:51.050Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://L1nkzz.github.io"/>
    <link rel="self" href="https://L1nkzz.github.io/atom.xml"/>
    <logo>https://L1nkzz.github.io/images/avatar.png</logo>
    <icon>https://L1nkzz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, L1nk的博客</rights>
    <entry>
        <title type="html"><![CDATA[图论]]></title>
        <id>https://L1nkzz.github.io/post/tu-lun/</id>
        <link href="https://L1nkzz.github.io/post/tu-lun/">
        </link>
        <updated>2020-11-01T15:22:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="强连通">强连通</h1>
<p>tarjan算法<br>
记录：</p>
<ul>
<li>bool in，记录是否在某个强连通分量中；</li>
<li>low，这个点所能到达的最高点（dfs序）</li>
<li>g，记录所在强连通分量的序号</li>
<li>dfn，dfs序</li>
</ul>
<p><strong>代码</strong>：</p>
<pre><code class="language-cpp">vector&lt;int&gt; lines[10005];
struct Node
{
    bool in;
    int g;
    int low;
    int dfn;
}mp[10005];
int size[10005];
int g;
int p;
int ans;
stack&lt;int&gt; st;
void tarjan(int pos)
{
    mp[pos].low = mp[pos].dfn = ++p;
    mp[pos].in = true;
    st.push(pos);
    F(i, 0, lines[pos].size() - 1)
    {
        if(!mp[lines[pos][i]].dfn)
        {
            tarjan(lines[pos][i]);
            mp[pos].low = min(mp[pos].low, mp[lines[pos][i]].low);
        }
        else if(mp[lines[pos][i]].in)
        {
            mp[pos].low = min(mp[pos].low, mp[lines[pos][i]].dfn);
        }
    }
    if(mp[pos].low == mp[pos].dfn)
    {
        mp[pos].g = ++g;
        mp[pos].in = false;
        int id = 10000000;
        do
        {
            id = st.top();
            mp[id].g = g;
            size[g]++;
            mp[id].in = false;
            st.pop();
        } while (id != pos);
    }
}
</code></pre>
<p>解释：假如连接的下个点没有dfn（没走过），正常走，此点的low取两者的最小值；假如连接的下个点走过，更新low就可以了；假如一个点的low等于它本身，说明它就是这个强连通分量的最高点，此时栈中所有比pos后入栈的点都在pos所在的强连通分量中。</p>
<h2 id="缩点">缩点</h2>
<p>边所连接的两点不在同一强连通分量的边全部连向top，在同一强连通分量的边删除，点的权值全部加给top<br>
<em>top指强连通分量中dfs序最小的点</em></p>
<h2 id="割点">割点</h2>
<ul>
<li>当此点为根节点时，假如子树数量大于1，那么此点必为割点</li>
<li>虽然是张无向图，但是我们是dfs遍历，因此我们每次回到根节点都相当于遍历完一颗子树，关于这颗子树上有没有环我们不关心</li>
<li>对于非根节点，我们只需判断它的所有子节点中有无点的low（<em>可回溯到的最高点</em>）是否大于等于当前点，如果是，那么说明删去当前点的话这个子节点就无法与此节点上方的节点联通，因此此点为割点</li>
</ul>
<h1 id="最短路">最短路</h1>
<p>dijkstra算法，需要用优先队列，可以处理单源最短路径，但不可以有权值为负数的边<br>
核心代码：</p>
<pre><code class="language-cpp">point tmp;
p[s] = 0;
tmp.id = s;
tmp.d = 0;
m.push(tmp);
while(!m.empty())
{
	int ps = m.top().id;
	int dis = m.top().d;
	m.pop();
    if(trig[ps])
        continue;
    trig[ps] = true;
    for(int i = 0; i &lt; z[ps].size(); i++)
	{
		int ad = dis + z[ps][i].d;
		if(ad &lt; p[z[ps][i].t] &amp;&amp; !trig[z[ps][i].t])
		{
	    	p[z[ps][i].t] = ad;
			point tmp;
			tmp.id = z[ps][i].t;
			tmp.d = ad;
			m.push(tmp);
		}
	}
}
</code></pre>
<h1 id="生成树">生成树</h1>
<p>kruscal算法：将边按权值从小到大排列；遍历每条边，假如这条边连接的两个点不连通（用并查集维护），那么就连上这条边，ans+=权值，一直操作到边数等于点数-1（树的边数）</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;
int n, m;
long ans;
int p;
vector&lt;int&gt; b[5005];
struct line
{
   int x, y, len;
}lines[200005];
int f[200005];
bool cmp(line x, line y)
{
   return x.len &lt; y.len;
}
int find(int x)
{
   if(x != f[x])
   {
   	f[x] = find(f[x]);
   	return f[x];
   }
   else
   return x;
}
int main()
{
   cin &gt;&gt; n &gt;&gt; m;
   p = 0;
   for(int i = 1; i &lt;= m; i++)
   {
   	int t, m, p;
   	cin &gt;&gt; t &gt;&gt; m &gt;&gt; p;
   	lines[i].x = min(t, m);
   	lines[i].y = max(t, m);
   	lines[i].len = p;
   }
   for(int i = 1; i &lt;= n; i++)
   {
   	f[i] = i;
   }
   sort(lines + 1, lines + 1 + m, cmp);
   for(int i = 1; i &lt;= m; i++)
   {
   	if(p == n - 1)
   	break;
   	int x = lines[i].x, y = lines[i].y;
   	y = find(y);
   	x = find(x);
   	if(f[x] != f[y])
   	{
   		p++;
   		f[y] = x;
   		find(y);
   		ans += lines[i].len;
   	}
   }
   if(p != n - 1)
   cout &lt;&lt; &quot;orz&quot;;
   else
   cout &lt;&lt; ans;
   return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bugs]]></title>
        <id>https://L1nkzz.github.io/post/bugs/</id>
        <link href="https://L1nkzz.github.io/post/bugs/">
        </link>
        <updated>2020-11-01T13:05:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="重点">重点</h1>
<ul>
<li><em><strong>freopen！</strong></em></li>
<li><em><strong>long long! 用快读的话，不要忘记把快读的返回值改成longlong， 里面的整数n也要改成longlong， printf(&quot;%lld&quot;)</strong></em></li>
<li><em><strong>int main()!</strong></em> <s>因为忘记开ll直接ctrl+F把全部int替换成ll</s></li>
<li><em><strong>cin,cout不能和printf,scanf,快读等混用</strong></em></li>
<li><em><strong>别忘加头文件！</strong></em></li>
<li><em><strong>if里是用==不是=</strong></em> <s>迟诚行为</s></li>
</ul>
<h1 id="线段树">线段树</h1>
<p>习惯：add(int pos, int l, int r, int nl, int nr, int k)<br>
find(int pos, int l, int r, int nl, int nr)<br>
pos指线段树中当前下标，l、r为所要求的l、r，nl、nr为nowl,nowr，即为现在所在的区间端点</p>
<ul>
<li>数组开四倍大小</li>
<li>add、find中mid = nl + nr &gt;&gt; 1;</li>
<li>向下遍历时：if(l &lt;= mid) 和 if(r &gt; mid)</li>
<li>一定要记住在函数中间写down，结尾写up！</li>
<li>down里num[pos &lt;&lt; 1] + ltag[pos] * (mid - l + 1)！千万不能直接写size = r - l + 1 &gt;&gt; 1;</li>
<li>主函数调用函数的参数一定要一一对应，不能够上面void doit(int size, int pos)下面调用时doit(pos, size)</li>
<li>不要图方便把mid等变量改成全局变量</li>
<li>maketree()、add()等等没有返回值的函数，l==r或者nl &gt;= l &amp;&amp; nr &lt;= r等函数结束时，不要忘记return来避免继续递归</li>
</ul>
<h1 id="树链剖分">树链剖分</h1>
<ul>
<li>dfs1，处理f，depth，bson(biggest_son)，size</li>
<li>如何判断连的边不是父节点？lines[pos][i] != list[pos].f</li>
<li>dfs2，处理dfs序，将点的权值按照dfs序传入数组，方便建立线段树；处理重链的顶点</li>
<li>dfs序一定要bson优先，这样能保证一条重链上的dfs序号连续</li>
</ul>
<h1 id="莫队算法">莫队算法</h1>
<ul>
<li>离线！</li>
<li>询问排序：优先按左端点的块的编号排序，其次按右端点排序</li>
<li><strong>核心</strong></li>
<li>指针st， ed，对于排序后的每个询问进行指针的左右移动，同时对ans进行修改</li>
</ul>
<h1 id="矩阵相乘">矩阵相乘</h1>
<p>矩阵a(n, m), b(m, k)，相乘得到c(n, k);<br>
c(x, y)为a第x行每个值与b第y行每个值的乘积之和</p>
<h1 id="强连通">强连通</h1>
<ul>
<li>while从栈中取数时，判断条件为<em>while (id != pos)</em>，不能写list[st.top()].dfn != xxxxxxx.low，因为同一强连通分量里可能会有不止一个点满足这一条件</li>
</ul>
<h1 id="最短路">最短路</h1>
<ul>
<li><strong>优！先！队！列！的！比！较！函！数！是！反！过！来！的！写！大！于！号！就！成！了！小！根！堆！</strong></li>
<li>记得开visit数组记录此节点走没走过，否则时间会爆炸的</li>
<li>要把mindis数组初始化为INT_MAX</li>
<li>优先队列取完队首要立刻出栈！！！</li>
<li>在加入优先队列时，一定要优先更新mindis数组，否则q.top()可能会改变，也不要一定以为新加入的点一定是最小值；<br>
错误如下：<pre><code class="language-cpp">points tmp;
tmp.pos = id;
tmp.d = dis;
q.push(tmp);
d[id] = q.top().d;
</code></pre>
</li>
</ul>
<h1 id="生成树">生成树</h1>
<ul>
<li>保证每条边的x、y有序，x小于y，这样方便维护并查集</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习清单]]></title>
        <id>https://L1nkzz.github.io/post/xue-xi-qing-dan/</id>
        <link href="https://L1nkzz.github.io/post/xue-xi-qing-dan/">
        </link>
        <updated>2020-10-14T11:24:28.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>三分</li>
<li>模拟退火</li>
<li>数论</li>
<li>线段树（已完成）</li>
<li>树链剖分（已完成）</li>
<li>网络流</li>
<li>CDQ分治     <s>模板过了就当做完成了吧</s></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[清 北 学 堂 国 庆 七 日 游]]></title>
        <id>https://L1nkzz.github.io/post/qing-bei-xue-tang-guo-qing-qi-ri-you/</id>
        <link href="https://L1nkzz.github.io/post/qing-bei-xue-tang-guo-qing-qi-ri-you/">
        </link>
        <updated>2020-10-12T15:28:11.000Z</updated>
        <content type="html"><![CDATA[<p>ytez除了我都强的离谱</p>
<p><s>我不是ytez的啊，那没事了</s></p>
<p><s>不管题了，直接讲课件</s></p>
<h2 id="搜-索-与-枚-举">搜 索 与 枚 举</h2>
<p><s>课件中枚举里最难的就是水仙花数所以略过</s></p>
<h3 id="搜索"><strong>搜索</strong></h3>
<ul>
<li>广度优先搜索（BFS<s>被反杀</s>）</li>
<li>深度优先搜索（DFS<s>大法师</s>）</li>
<li>记忆化搜索</li>
<li>迭代加深搜索（IDFS<s>爱大法师</s>）</li>
<li>A*</li>
<li>IDA*</li>
<li>meet in the middle</li>
<li>爬山算法</li>
<li>模拟退火</li>
</ul>
<h4 id="深度优先搜索"><strong>深度优先搜索</strong></h4>
<blockquote>
<p>例：想象你面前有一棵树<br>
你现在在一号点，你想找到树中与一号点连通的每一个点<br>
那么我们考虑按照深度优先的顺序去遍历这棵树，即，假设你当前在点x，如果和x连边的点中有一个点y，满足y比x深，即y是x的儿子，并且y还没有被访问过，那么我们就走到y，如果有多个y满足条件，我们走到其中任意一个<br>
如果没有y满足条件，我们返回x的父亲<br>
按照这个顺序，我们就可以访问到每个节点，并且每条边会恰好被走两次（从父亲到儿子一次，从儿子到父亲一次）</p>
</blockquote>
<p><strong>小 试 牛 刀</strong></p>
<p>遍历一张图</p>
<pre><code class="language-cpp">void dfs(int x){
	int i;
	vis[x]=1;
	for(i=1;i&lt;=n;i++){
		if(mp[x][i]&amp;&amp;!vis[i]){
			dfs(i);
		}
	}
}
</code></pre>
<p>枚举一个集合中的所有子集</p>
<pre><code class="language-cpp">void dfs(int x){
	if(x&gt;n){
		//得到了一个子集 
		return ;
	}
	s[++tot]=a[x];
	dfs(x+1);//选第x位
	tot--;
	dfs(x+1);//不选
}
</code></pre>
<p>如何用dfs判断一个图里有没有环？</p>
<pre><code class="language-cpp">void dfs(int pos)
{
    vis[i] = true;
    for(int i = 1; i &lt;= c[pos]; i++)
    {
        if(vis[next[pos][i]])
        {
            cout &lt;&lt; -1;
            return;
        }
        dfs(next[pos][i]);
    }
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P1219">八皇后问题</a></p>
<blockquote>
<p>在一个n*n的棋盘上摆n个皇后，使他们两两不能互相攻击到，求方案数<br>
N&lt;=10</p>
</blockquote>
<pre><code class="language-cpp">void dfs(int step)
{
	for(int i = 1; i &lt;= n; i++)
	{
		if(!trigs[i])
		{
			bool trig = true;
			for(int j = 1; j &lt; step; j++)
			{
				{
					if(hangs[j] + step - j == i || hangs[j] - step + j == i)
					{
						trig = false;
						break;
					}
				}
			}
			if(trig)
			{
				hangs[step] = i;
				if(step == n)
				{
					times++;
					break;
				}
				else
				{
					trigs[i] = 1;
					dfs(step + 1);
					trigs[i] = 0;
				}
			}
		}
	}
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P1731">NOI1999 生日蛋糕</a></p>
<p>dfs需要传哪些状态？</p>
<ul>
<li>第i层</li>
<li>高度</li>
<li>半径</li>
<li>表面积</li>
<li>体积</li>
</ul>
<p><em>剪枝时间~</em></p>
<ul>
<li>可行性剪枝：剩余的材料太少或太多，不足以构造剩余层数的蛋糕，剪枝；</li>
<li>最优化剪枝：如果当前已用表面积加上余下最小的侧面积大于已知最优解，剪枝；</li>
</ul>
<h4 id="广度优先搜索"><strong>广度优先搜索</strong></h4>
<blockquote>
<p>例：还是想像一棵树<br>
你现在还是在一号点，你还是想找到树中与一号点连通的每一个点<br>
我们初始的时候把一号点推入队取出队尾，然后只要当前队列非空，我们就取出队头元素x，并将队头弹出<br>
然后我们将x的所有儿子推入队列<br>
对于图上的情况，我们将所有与x相连，并且还没入过队的点推入队列<br>
这样我们就能够访问所有点</p>
</blockquote>
<pre><code class="language-cpp">void bfs(){
	q[tl++]=s;
	while(hd!=tl){
		x=q[hd++];
		for(i=1;i&lt;=n;i++){
			if(mp[x][i]&amp;&amp;!vis[i]){
				q[tl++]=i;
				vis[i]=1;
			}
		}
	}
}
</code></pre>
<p><a href="https://www.luogu.com.cn/problem/P4289">[HAOI2008]移动玩具</a></p>
<p>将4*4的矩阵看做一排，变成长度为16的二进制数，dfs即可</p>
<h4 id="记忆化搜索"><strong>记忆化搜索</strong></h4>
<blockquote>
<p>假设你现在有一个有向无环图<br>
你要求从1号节点出发的最长的路径<br>
我们可以令f[i]表示从i出发的最长的路径<br>
那么f[x]=max(f[y]+len)，len为x到y的边的长度<br>
f[1]即为答案<br>
我们可以通过dfs来求f值，而这样的话复杂度是指数级的<br>
我们发现在搜索过程中，我们会搜索重复的状态，即，不论你从x开始搜索几次，你得到的答案都是一样的<br>
那么我们不妨记录一下每个点是否被搜索过，以及搜索的结果是什么<br>
如果当前要搜的点已经被搜索过了，我们就直接返回结果<br>
这就叫做记忆化搜索</p>
</blockquote>
<p><s>实质为动态规划</s><br>
所有的动态规划都能用记忆化搜索实现，但常数会很大<br>
记忆化搜索不需要按照拓扑序，因为搜索的过程本身就遵循拓扑序</p>
<p>计数</p>
<blockquote>
<p>一副不含王的扑克牌由52张牌组成，由红桃、黑桃、梅花、方块4组牌组成，每组13张不同的面值。现在给定52张牌中的若干张，请计算将它们排成一列，相邻的牌面值不同的方案数。</p>
</blockquote>
<p>记录13种面值的出现次数，进行记忆化搜索</p>
<h4 id="idfs"><strong>IDFS</strong></h4>
<p>有些情况下，我们无法直接进行dfs或bfs，因为你要搜索的图可能是无限大的，每个点所连的边也可能有无限多条，此时dfs和bfs同时失效。<br>
IDFS：在进行dfs时对搜索深度进行限制，这样就将无限大小的图缩为有限大小的图，可以进行搜索（结合bfs和dfs）</p>
<p><strong>小 试 牛 刀</strong></p>
<p><a href="https://www.luogu.com.cn/problem/UVA12558">埃及分数<s>IG粉丝</s></a><br>
枚举相加分数的个数，则第一个枚举到的状态为最佳状态。<br>
这样就成功的将无限的深度转变为有限的深度。</p>
<h4 id="a"><strong>A</strong>*</h4>
<blockquote>
<p>A*，常见于游戏中的自动寻路。</p>
</blockquote>
<p>设已经消耗的代价为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，估算从x到终点的代价为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">g(x)=f(x)+h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>那么用优先队列来维护<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">g(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>最小的点，进行搜索</p>
<p><em><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>是A*的精髓，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>越接近于实际代价，A*效率越高。但是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>不能够大于实际代价，就会导致答案错误。</em></p>
<p><strong>小 试 牛 刀</strong></p>
<p><a href="https://www.luogu.com.cn/problem/P1379">八数码问题</a></p>
<p><em>两种可行的h函数<br>
1.不应该在这个位置的数字数<br>
2.所用数字距离应在位置的曼哈顿距离</em></p>
<p><a href="https://www.luogu.com.cn/problem/P4467">K短路问题(紫题，不会被卡)</a><br>
<em><a href="https://www.luogu.com.cn/problem/P2483">黑题，会被卡掉一个点</a></em><br>
用A*，遍历到终点的第K次就是K短路问题<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>为x到终点的最短路</p>
<h4 id="ida"><strong>IDA</strong>*</h4>
<blockquote>
<p>在进行IDFS的时候，我们也可以用A*进行搜索<br>
如果在当前深度限制下搜到了结束状态，我们就可以直接输出答案<br>
如果没有搜到答案，我们可以把深度限制更新为最小的f(x)</p>
</blockquote>
<p>解析：当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>超过要求深度时，剪枝。</p>
<p><strong>小 试 牛 刀</strong></p>
<p><a href="https://www.luogu.com.cn/problem/UVA1343">[poj2286]The Rotation Game</a></p>
<p>IDA*，思路同埃及分数，枚举移动步数，设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>为8-中间8个数中出现次数最多的那个数（最少移动次数）</p>
<p><a href="https://www.luogu.com.cn/problem/P2324">[SCOI2005]骑士精神</a></p>
]]></content>
    </entry>
</feed>